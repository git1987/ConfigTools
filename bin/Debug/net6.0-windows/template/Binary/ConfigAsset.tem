using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using ConfigTools;
/// <summary>
/// #{ClassSummary}
/// </summary>
public class #{ClassName}ConfigAsset : ConfigAssetBase
{
    [System.Serializable]
    public class #{ClassName}Config : ConfigAssetBase.ConfigAsset
    {
#if List
        #{typeName} #{variableName};
#endif
    }
    public List<#{ClassName}Config> configList;
    public Dictionary<int, #{ClassName}Config> configs;
    public override string GetConfigName()
    {
        return "#{ClassName}Config";
    }
    public #{ClassName}Config GetConfigByID(int configID)
    {
        if (configs.TryGetValue(configID, out #{ClassName}Config config))
        {
            return config;
        }
        else
        {
            Debug.LogError($"{configID}:config is null!");
            return null;
        } 
    }
    protected override void ReadList()
    {
        configs = new Dictionary<int, #{ClassName}Config>();
        for (int i = 0; i < configList.Count; i++)
        {
            if (!configs.ContainsKey(configList[i].ID))
                configs.Add(configList[i].ID, configList[i]);
        }
    }

    public override void ReadFromBytes(byte[] bytes)
    {
        MemoryStream stream = new(bytes);
        BinaryReader reader = new BinaryReader(stream);
        int dataCount = reader.ReadInt32();
        configList = new List<#{ClassName}Config>(dataCount);
        for(int i = 0;i < dataCount; i++)
        {
            #{ClassName}Config config = new();
#if List
            config.#{variableName} = #{assignment};
#endif
            configList.Add(config);
        }
        ReadList();
    }

}
