using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using LitJson;

/// <summary>
/// Csv表格数据类
/// </summary>
public class #{ClassName}ConfigAsset : ConfigAssetBase
{
    [System.Serializable]
    public class #{ClassName}Config : ConfigAssetBase.ConfigAsset
    {
#if !List
        #{typeName} #{variableName};
#endif
        public void Init(JsonData jd)
        {
#if !List
            #{variableName} = #{assignment};
#endif
        }
    }
    public List<#{ClassName}Config> configs;
    public Dictionary<int, #{ClassName}Config> configsDictionary;
    public override string GetConfigName()
    {
        return "#{ClassName}Config";
    }
    public void ReadList()
    {
        configsDictionary = new Dictionary<int, #{ClassName}Config>();
        for (int i = 0; i < configs.Count; i++)
        {
            if (!configsDictionary.ContainsKey(configs[i].ID))
                configsDictionary.Add(configs[i].ID, configs[i]);
        }
    }
    public override void ReadFromData(object obj)
    {
        CsvReader reader = obj as CsvReader;
        configs = new List<#{ClassName}Config>();
        for (int i = 1; i < reader.RowCount + 1; i++)
        {
            #{ClassName}Config configItem = new #{ClassName}Config();
            configItem.ID = int.Parse(reader[i][0].ToString());
            try
            {
                configItem.Init(reader[i]);
            }
            catch (System.Exception e)
            {
                Debug.LogError("FormatException! ConfigName: " + GetConfigName() + " ID: " + configItem.ID + " row: " + i);
                throw e;
            }
            configs.Add(configItem);
        }
    }

}
